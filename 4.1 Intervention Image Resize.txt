0.go to this site for more information
https://image.intervention.io/v2
//see methods
https://image.intervention.io/v3/introduction/upgrade

// Resize the image proportionally (maintaining the aspect ratio)
// The image will fit within the given dimensions (1020x519), and the smaller dimension will match one of the target dimensions.
// Example: If the original image is 2000x1000, it will be resized to 1020x510 (aspect ratio preserved).
$image->scale(1020, 519);

// Resize the image without maintaining the aspect ratio
// The image will be distorted or stretched to exactly match the specified dimensions (1020x519).
// Use this if you don't care about the original proportions and need to force specific dimensions.
$image->resize(1020, 519);

// Resize the image proportionally to fit within the dimensions (contain)
// The image will be resized to fit within 1020x519 without cropping, and blank space (transparent for PNG or black for JPG) will be added as padding if necessary.
// Example: A 1000x1000 image will become 519x519 and be padded to 1020x519.
$image->contain(1020, 519);

// Resize the image proportionally and crop to exactly fill the dimensions (cover)
// The image will be resized proportionally, and any overflow will be cropped to fit exactly into the target dimensions (1020x519).
// Example: A 2000x1000 image will first resize proportionally to 1020x510, and then the extra height (if any) will be cropped to fit.
$image->cover(1020, 519);


Installation Process
1.give composer command
composer require intervention/image:^3

2.যা হবে এরপর সব automatically store হবে
composer.json ফাইল এ intervention file store হবে:
 "require": {
        "intervention/image": "^3.10", 
    },

vendor->intervention ফোল্ডার automatically তৈরি হবে।

3.now in php.ini file change 

C:\xampp\php\php.ini
যদি কমেন্ট করা থাকে কমেন্ট অফ করে দিব।
;extension=gd
to
extension=gd


4.Class import করতে হবে।

use Intervention\Image\Drivers\Gd\Driver;
use Intervention\Image\ImageManager;

4.now implement in project

				//if selected than recive the image
                $recive_file = $request->file('home_slide_image_button');

                // create image manager with desired driver
                $manager = new ImageManager(new Driver());

                // read image from file system
                $image = $manager->read($recive_file);

                // resize image proportionally to 300px width
                //$image->scale(636,852);
				//resize image without proportionally
				$image->resize(636,852);
				
	#############store image in directory(for store in directory we need absolute path)################
	
	//file name
	$timestamp = date('YmdHis'); // Get the current date and time (Year, Month, Day, Hour, Minute, Second)
	$milliseconds = sprintf('%05d', (int) (microtime(true) * 1000) % 1000); // Get the milliseconds
	$fileName = $timestamp . '_' . $milliseconds . '_' . $recive_file->getClientOriginalName();

	//absolute path means full path

	$destinationPath = public_path('upload/home_slide');
	 // Move the file to the destination path
     $image->save($destinationPath.DIRECTORY_SEPARATOR .$fileName);
	 
	 #############store image path in database ################
	 $relativePath ='upload/home_slide';
	 //store file name in database
     $stored_slider_data['home_slide']=$relativePath.'/' .$fileName;
	 
	 

5.Everything in code


	Route::controller(HomeSliderController::class)->group(function (){
		Route::post('/update/slider','UpdateSlider')->name('update.slider');
	});
	
	
	use Intervention\Image\ImageManager;
	use Intervention\Image\Drivers\Gd\Driver;
	
	public function UpdateSlider(Request $request){
        //return "Hi";

        // Apply validation rules using the $request->validate() method
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'short_title' => 'nullable|string|max:255',
            'video_url' => 'nullable|url',
            'home_slide_image_button' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048', // Image validation
        ]);
        //this id from form(where field is hidden)
        $slide_id = $request->id;
        $stored_slider_data=HomeSlide::find($slide_id);

       //return $stored_slider_data;
        //store data into database/update into databasae
        $stored_slider_data->title=$request->title;
        $stored_slider_data->short_title=$request->short_title;
        $stored_slider_data->video_url=$request->video_url;
        //return $stored_slider_data;
        try{
            // Check image is selected or not
            if($request->hasFile('home_slide_image_button')) {

                // If the old image exists, delete it first
                if ($stored_slider_data->home_slide && file_exists(public_path($stored_slider_data->home_slide))) {
                    unlink(public_path($stored_slider_data->home_slide));
                }

                //if selected than recive the image
                $recive_file = $request->file('home_slide_image_button');

                // create image manager with desired driver
                $manager = new ImageManager(new Driver());

                // read image from file system
                $image = $manager->read($request->file('home_slide_image_button'));

                // resize image proportionally to 300px width
                $image->scale(636,852);




                //make file name unique
                //$fileName = time() . '_' . $recive_file->getClientOriginalName();
                //here Hmsi_microsecond_imageExtention
                $timestamp = date('YmdHis'); // Get the current date and time (Year, Month, Day, Hour, Minute, Second)
                $milliseconds = sprintf('%05d', (int) (microtime(true) * 1000) % 1000); // Get the milliseconds
                $fileName = $timestamp . '_' . $milliseconds . '_' . $recive_file->getClientOriginalName();


                // Define the destination path for the uploaded file
                //make destination path where will file storing
                //$destinationPath = public_path('upload/home_slide');
                $relativePath ='upload/home_slide';
                $destinationPath = public_path('upload/home_slide');

                // Create the directory if it doesn't exist
                if (!file_exists($destinationPath)) {
                    mkdir($destinationPath, 0777, true);
                }




                // Move the file to the destination path
                $image->save($destinationPath.DIRECTORY_SEPARATOR .$fileName);

                //store file name in database
                $stored_slider_data['home_slide']=$relativePath.'/' .$fileName;
            }
            //return $store_data;
            $stored_slider_data->save();

            return redirect()->route('home.slide');
        }catch (Exception $e){
            // Log the error
            Log::error('Error updating user profile: ' . $e->getMessage());

            // Redirect with error message
            return redirect()->back()->withErrors('Something went wrong. Please try again later.');
        }

    }